// source: config.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.AppliedVoiceConfig', null, global);
goog.exportSymbol('proto.Dictionary', null, global);
goog.exportSymbol('proto.DictionaryEntryA', null, global);
goog.exportSymbol('proto.DictionaryEntryB', null, global);
goog.exportSymbol('proto.VoiceConfigRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DictionaryEntryA = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DictionaryEntryA, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DictionaryEntryA.displayName = 'proto.DictionaryEntryA';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DictionaryEntryB = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DictionaryEntryB, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DictionaryEntryB.displayName = 'proto.DictionaryEntryB';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Dictionary = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Dictionary.repeatedFields_, null);
};
goog.inherits(proto.Dictionary, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Dictionary.displayName = 'proto.Dictionary';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AppliedVoiceConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AppliedVoiceConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AppliedVoiceConfig.displayName = 'proto.AppliedVoiceConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.VoiceConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.VoiceConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.VoiceConfigRequest.displayName = 'proto.VoiceConfigRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DictionaryEntryA.prototype.toObject = function(opt_includeInstance) {
  return proto.DictionaryEntryA.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DictionaryEntryA} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DictionaryEntryA.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    p: jspb.Message.getFieldWithDefault(msg, 3, ""),
    p1: jspb.Message.getFieldWithDefault(msg, 4, ""),
    p2: jspb.Message.getFieldWithDefault(msg, 5, ""),
    p3: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DictionaryEntryA}
 */
proto.DictionaryEntryA.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DictionaryEntryA;
  return proto.DictionaryEntryA.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DictionaryEntryA} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DictionaryEntryA}
 */
proto.DictionaryEntryA.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setP(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setP1(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setP2(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setP3(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DictionaryEntryA.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DictionaryEntryA.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DictionaryEntryA} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DictionaryEntryA.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getP();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getP1();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getP2();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getP3();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string p = 3;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getP = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setP = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string p1 = 4;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getP1 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setP1 = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string p2 = 5;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getP2 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setP2 = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string p3 = 6;
 * @return {string}
 */
proto.DictionaryEntryA.prototype.getP3 = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryA} returns this
 */
proto.DictionaryEntryA.prototype.setP3 = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DictionaryEntryB.prototype.toObject = function(opt_includeInstance) {
  return proto.DictionaryEntryB.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DictionaryEntryB} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DictionaryEntryB.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: jspb.Message.getFieldWithDefault(msg, 1, ""),
    to: jspb.Message.getFieldWithDefault(msg, 2, ""),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DictionaryEntryB}
 */
proto.DictionaryEntryB.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DictionaryEntryB;
  return proto.DictionaryEntryB.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DictionaryEntryB} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DictionaryEntryB}
 */
proto.DictionaryEntryB.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DictionaryEntryB.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DictionaryEntryB.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DictionaryEntryB} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DictionaryEntryB.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTo();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string from = 1;
 * @return {string}
 */
proto.DictionaryEntryB.prototype.getFrom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryB} returns this
 */
proto.DictionaryEntryB.prototype.setFrom = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string to = 2;
 * @return {string}
 */
proto.DictionaryEntryB.prototype.getTo = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.DictionaryEntryB} returns this
 */
proto.DictionaryEntryB.prototype.setTo = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 index = 3;
 * @return {number}
 */
proto.DictionaryEntryB.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.DictionaryEntryB} returns this
 */
proto.DictionaryEntryB.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Dictionary.repeatedFields_ = [2,1,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Dictionary.prototype.toObject = function(opt_includeInstance) {
  return proto.Dictionary.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Dictionary} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.toObject = function(includeInstance, msg) {
  var f, obj = {
    beforeList: jspb.Message.toObjectList(msg.getBeforeList(),
    proto.DictionaryEntryB.toObject, includeInstance),
    entrysList: jspb.Message.toObjectList(msg.getEntrysList(),
    proto.DictionaryEntryA.toObject, includeInstance),
    afterList: jspb.Message.toObjectList(msg.getAfterList(),
    proto.DictionaryEntryB.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Dictionary}
 */
proto.Dictionary.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Dictionary;
  return proto.Dictionary.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Dictionary} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Dictionary}
 */
proto.Dictionary.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.DictionaryEntryB;
      reader.readMessage(value,proto.DictionaryEntryB.deserializeBinaryFromReader);
      msg.addBefore(value);
      break;
    case 1:
      var value = new proto.DictionaryEntryA;
      reader.readMessage(value,proto.DictionaryEntryA.deserializeBinaryFromReader);
      msg.addEntrys(value);
      break;
    case 3:
      var value = new proto.DictionaryEntryB;
      reader.readMessage(value,proto.DictionaryEntryB.deserializeBinaryFromReader);
      msg.addAfter(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Dictionary.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Dictionary.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Dictionary} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Dictionary.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBeforeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.DictionaryEntryB.serializeBinaryToWriter
    );
  }
  f = message.getEntrysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.DictionaryEntryA.serializeBinaryToWriter
    );
  }
  f = message.getAfterList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.DictionaryEntryB.serializeBinaryToWriter
    );
  }
};


/**
 * repeated DictionaryEntryB before = 2;
 * @return {!Array<!proto.DictionaryEntryB>}
 */
proto.Dictionary.prototype.getBeforeList = function() {
  return /** @type{!Array<!proto.DictionaryEntryB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DictionaryEntryB, 2));
};


/**
 * @param {!Array<!proto.DictionaryEntryB>} value
 * @return {!proto.Dictionary} returns this
*/
proto.Dictionary.prototype.setBeforeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.DictionaryEntryB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DictionaryEntryB}
 */
proto.Dictionary.prototype.addBefore = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.DictionaryEntryB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary} returns this
 */
proto.Dictionary.prototype.clearBeforeList = function() {
  return this.setBeforeList([]);
};


/**
 * repeated DictionaryEntryA entrys = 1;
 * @return {!Array<!proto.DictionaryEntryA>}
 */
proto.Dictionary.prototype.getEntrysList = function() {
  return /** @type{!Array<!proto.DictionaryEntryA>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DictionaryEntryA, 1));
};


/**
 * @param {!Array<!proto.DictionaryEntryA>} value
 * @return {!proto.Dictionary} returns this
*/
proto.Dictionary.prototype.setEntrysList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.DictionaryEntryA=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DictionaryEntryA}
 */
proto.Dictionary.prototype.addEntrys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.DictionaryEntryA, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary} returns this
 */
proto.Dictionary.prototype.clearEntrysList = function() {
  return this.setEntrysList([]);
};


/**
 * repeated DictionaryEntryB after = 3;
 * @return {!Array<!proto.DictionaryEntryB>}
 */
proto.Dictionary.prototype.getAfterList = function() {
  return /** @type{!Array<!proto.DictionaryEntryB>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DictionaryEntryB, 3));
};


/**
 * @param {!Array<!proto.DictionaryEntryB>} value
 * @return {!proto.Dictionary} returns this
*/
proto.Dictionary.prototype.setAfterList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.DictionaryEntryB=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DictionaryEntryB}
 */
proto.Dictionary.prototype.addAfter = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.DictionaryEntryB, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Dictionary} returns this
 */
proto.Dictionary.prototype.clearAfterList = function() {
  return this.setAfterList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AppliedVoiceConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AppliedVoiceConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AppliedVoiceConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AppliedVoiceConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    kind: jspb.Message.getFieldWithDefault(msg, 1, ""),
    readname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    speed: jspb.Message.getFieldWithDefault(msg, 3, 0),
    tone: jspb.Message.getFieldWithDefault(msg, 4, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxreadlimit: jspb.Message.getFieldWithDefault(msg, 6, 0),
    dictionary: (f = msg.getDictionary()) && proto.Dictionary.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AppliedVoiceConfig}
 */
proto.AppliedVoiceConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AppliedVoiceConfig;
  return proto.AppliedVoiceConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AppliedVoiceConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AppliedVoiceConfig}
 */
proto.AppliedVoiceConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setReadname(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSpeed(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setTone(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readSint32());
      msg.setVolume(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxreadlimit(value);
      break;
    case 7:
      var value = new proto.Dictionary;
      reader.readMessage(value,proto.Dictionary.deserializeBinaryFromReader);
      msg.setDictionary(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AppliedVoiceConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AppliedVoiceConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AppliedVoiceConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AppliedVoiceConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getReadname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSpeed();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getTone();
  if (f !== 0) {
    writer.writeSint32(
      4,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeSint32(
      5,
      f
    );
  }
  f = message.getMaxreadlimit();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getDictionary();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.Dictionary.serializeBinaryToWriter
    );
  }
};


/**
 * optional string kind = 1;
 * @return {string}
 */
proto.AppliedVoiceConfig.prototype.getKind = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setKind = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string readName = 2;
 * @return {string}
 */
proto.AppliedVoiceConfig.prototype.getReadname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setReadname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 speed = 3;
 * @return {number}
 */
proto.AppliedVoiceConfig.prototype.getSpeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setSpeed = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional sint32 tone = 4;
 * @return {number}
 */
proto.AppliedVoiceConfig.prototype.getTone = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setTone = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional sint32 volume = 5;
 * @return {number}
 */
proto.AppliedVoiceConfig.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 maxReadLimit = 6;
 * @return {number}
 */
proto.AppliedVoiceConfig.prototype.getMaxreadlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.setMaxreadlimit = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional Dictionary dictionary = 7;
 * @return {?proto.Dictionary}
 */
proto.AppliedVoiceConfig.prototype.getDictionary = function() {
  return /** @type{?proto.Dictionary} */ (
    jspb.Message.getWrapperField(this, proto.Dictionary, 7));
};


/**
 * @param {?proto.Dictionary|undefined} value
 * @return {!proto.AppliedVoiceConfig} returns this
*/
proto.AppliedVoiceConfig.prototype.setDictionary = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.AppliedVoiceConfig} returns this
 */
proto.AppliedVoiceConfig.prototype.clearDictionary = function() {
  return this.setDictionary(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AppliedVoiceConfig.prototype.hasDictionary = function() {
  return jspb.Message.getField(this, 7) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.VoiceConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.VoiceConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.VoiceConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    guild: jspb.Message.getFieldWithDefault(msg, 1, ""),
    user: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nickname: jspb.Message.getFieldWithDefault(msg, 3, ""),
    username: jspb.Message.getFieldWithDefault(msg, 4, ""),
    dictHash: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.VoiceConfigRequest}
 */
proto.VoiceConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.VoiceConfigRequest;
  return proto.VoiceConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.VoiceConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.VoiceConfigRequest}
 */
proto.VoiceConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGuild(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUser(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNickname(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFixed64());
      msg.setDictHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.VoiceConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.VoiceConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.VoiceConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.VoiceConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGuild();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUser();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNickname();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDictHash();
  if (f !== 0) {
    writer.writeFixed64(
      5,
      f
    );
  }
};


/**
 * optional string guild = 1;
 * @return {string}
 */
proto.VoiceConfigRequest.prototype.getGuild = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.VoiceConfigRequest} returns this
 */
proto.VoiceConfigRequest.prototype.setGuild = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string user = 2;
 * @return {string}
 */
proto.VoiceConfigRequest.prototype.getUser = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.VoiceConfigRequest} returns this
 */
proto.VoiceConfigRequest.prototype.setUser = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string nickname = 3;
 * @return {string}
 */
proto.VoiceConfigRequest.prototype.getNickname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.VoiceConfigRequest} returns this
 */
proto.VoiceConfigRequest.prototype.setNickname = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string username = 4;
 * @return {string}
 */
proto.VoiceConfigRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.VoiceConfigRequest} returns this
 */
proto.VoiceConfigRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional fixed64 dict_hash = 5;
 * @return {number}
 */
proto.VoiceConfigRequest.prototype.getDictHash = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.VoiceConfigRequest} returns this
 */
proto.VoiceConfigRequest.prototype.setDictHash = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


goog.object.extend(exports, proto);
